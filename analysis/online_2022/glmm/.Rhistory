one_data_<-rbind(one_data_,data.frame(MAS = mas[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i]))
one_numCities<-rbind(one_numCities, data.frame(numCities[1:numPuzzle,i]))
}
}
save(models, file=paste(path_root, n_numCities,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_numCities)) ~ .^2, data=one_data_, family = poisson())
save(list(fit1), file=paste(path_root, n_numCities,"full_data_one_model.RData", sep='/'))
as.list(fit1)
save(as.list(fit1), file=paste(path_root, n_numCities,"full_data_one_model.RData", sep='/'))
save(models, file=paste(path_root, n_numCities,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_numCities)) ~ .^2, data=one_data_, family = poisson())
sink(paste(path_root, n_numCities, paste("fit_one_model", '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
library("broom")
library("ramify")
### Data loading
numParticipants = 9
numPuzzle = 92
numCities <- read.csv('numCities.csv',header = FALSE)
mas <- read.csv('mas.csv',header = FALSE)
nos <- read.csv('nos.csv',header = FALSE)
undo_c <- read.csv('undo_c.csv',header = FALSE)
leftover <- read.csv('leftover.csv',header = FALSE)
numError <- read.csv('numError.csv',header = FALSE)
sumSeverityErrors <- read.csv('sumSeverityErrors.csv',header = FALSE)
numUNDO <- read.csv('numUNDO.csv',header = FALSE)
TT <- read.csv('TT.csv',header = FALSE)
### make dirs
path_root <- 'puzzle-level'
n_numCities <- 'numCities'
n_mas <- 'mas'
n_nos <- 'nos'
n_undo_c <- 'undo_c'
n_leftover <- 'leftover'
n_numError <- 'numError'
n_sumSeverityErrors <- 'sumSeverityErrors'
n_numUNDO <- 'numUNDO'
n_TT <- 'TT'
### Analysis
### Puzzle-level
# Predicting the number of connected cities
# Model: Number of connected cities(puzzle, subject) = intercept(random effect of subject) (1 | subject) + w1 * MAS(puzzle) + w2 *number of optimal solutions (puzzle) + w3 * UNDO (puzzle) + 3 interaction
Betas = data.frame()
models = list()
for (i in 1:numParticipants){
data_ <- data.frame(MAS = mas[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i])
fit1 <- glm(numCities[1:numPuzzle,i] ~ .^2, data=data_, family = poisson())
write.csv( tidy( fit1 ) , paste(path_root, n_numCities, paste("fit_Sub", i, '.csv', sep=""), sep='/') )
sink(paste(path_root, n_numCities, paste("fit_Sub", i, '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
models[i] <- fit1
if (i == 1) {
one_data_  = data.frame(MAS = mas[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i])
one_numCities = data.frame(numCities[1:numPuzzle,i])
} else{
one_data_<-rbind(one_data_,data.frame(MAS = mas[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i]))
one_numCities<-rbind(one_numCities, data.frame(numCities[1:numPuzzle,i]))
}
}
save(models, file=paste(path_root, n_numCities,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_numCities)) ~ .^2, data=one_data_, family = poisson())
sink(paste(path_root, n_numCities, paste("fit_one_model", '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
# Predicting the number of undo in the UNDO condition
# Model: Number of undo(puzzle, subject) = intercept(random effect of subject) (1 | subject) + w1 * MAS(puzzle) + w2 * budget left after the maximum number of cities has been connected (puzzle) + w3*number of optimal solutions (puzzle) + w4*number of errors in a puzzle (puzzle) + interaction
Betas = data.frame()
models = list()
for (i in 1:numParticipants){
data_ <- data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i])
fit1 <- glm(numUNDO[1:numPuzzle,i] ~ .^2, data=data_, family = poisson())
write.csv( tidy( fit1 ) , paste(path_root, n_numUNDO, paste("fit_Sub", i, '.csv', sep=""), sep='/') )
sink(paste(path_root, n_numUNDO, paste("fit_Sub", i, '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
models[i] <- fit1
if (i == 1) {
one_data_  = data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i])
one_numUNDO = data.frame(numUNDO[1:numPuzzle,i])
} else{
one_data_<-rbind(one_data_,data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i]))
one_numUNDO<-rbind(one_numUNDO, data.frame(numUNDO[1:numPuzzle,i]))
}
}
save(models, file=paste(path_root, n_numUNDO,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_numUNDO)) ~ .^2, data=one_data_, family = poisson())
sink(paste(path_root, n_numUNDO, paste("fit_one_model", '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
# Predicting the sum of severity of all errors
# Model: sum of severity of errors(puzzle, subject) = intercept(random effect of subject) (1 | subject) + w1 * MAS(puzzle) + w2 * budget left after the maximum number of cities has been connected (puzzle)  + w3*number of optimal solutions (puzzle) + w4*UNDO condition (puzzle) + interaction
Betas = data.frame()
models = list()
for (i in 1:numParticipants){
data_ <- data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i])
fit1 <- glm(sumSeverityErrors[1:numPuzzle,i] ~ .^2, data=data_, family = poisson())
write.csv( tidy( fit1 ) , paste(path_root, n_sumSeverityErrors, paste("fit_Sub", i, '.csv', sep=""), sep='/') )
sink(paste(path_root, n_sumSeverityErrors, paste("fit_Sub", i, '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
models[i] <- fit1
if (i == 1) {
one_data_  = data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i])
one_sumSeverityErrors = data.frame(sumSeverityErrors[1:numPuzzle,i])
} else{
one_data_<-rbind(one_data_,data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i]))
one_sumSeverityErrors<-rbind(one_sumSeverityErrors, data.frame(sumSeverityErrors[1:numPuzzle,i]))
}
}
save(models, file=paste(path_root, n_sumSeverityErrors,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_sumSeverityErrors)) ~ .^2, data=one_data_, family = poisson())
sink(paste(path_root, n_sumSeverityErrors, paste("fit_one_model", '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
# Predicting RT for a trial
# Model: RT(puzzle, subject) = intercept(random effect of subject) (1 | subject) + w1 * MAS(puzzle) + w2*number of optimal solutions (puzzle) + w3*UNDO condition (puzzle) + interaction
Betas = data.frame()
models = list()
for (i in 1:numParticipants){
data_ <- data.frame(MAS = mas[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], UNDO = undo_c[1:numPuzzle,i])
fit1 <- glm(TT[1:numPuzzle,i] ~ .^2, data=data_, family = inverse.gaussian())
write.csv( tidy( fit1 ) , paste(path_root, n_TT, paste("fit_Sub", i, '.csv', sep=""), sep='/') )
sink(paste(path_root, n_TT, paste("fit_Sub", i, '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
models[i] <- fit1
if (i == 1) {
one_data_  = data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i])
one_TT = data.frame(TT[1:numPuzzle,i])
} else{
one_data_<-rbind(one_data_,data.frame(MAS = mas[1:numPuzzle,i], LEFTOVER = leftover[1:numPuzzle,i], NOS = nos[1:numPuzzle,i], NUMERROR = numError[1:numPuzzle,i]))
one_TT<-rbind(one_TT, data.frame(TT[1:numPuzzle,i]))
}
}
save(models, file=paste(path_root, n_TT,"full_list_perSub_models.RData", sep='/'))
fit1 <- glm(as.numeric(unlist(one_TT)) ~ .^2, data=one_data_, family = poisson())
sink(paste(path_root, n_TT, paste("fit_one_model", '.txt', sep=""), sep='/'))
print(summary(fit1))
sink()  # returns output to the console
open puzzle-level_glm.R
pkgs_CRAN <- c("lme4","MCMCglmm","blme",
"pbkrtest","coda","aods3","bbmle","ggplot2",
"reshape2","plyr","numDeriv","Hmisc",
"plotMCMC","gridExtra","R2admb",
"broom.mixed","dotwhisker")
clc
clear
close
install.packages(pkgs_CRAN)
rr <- "http://www.math.mcmaster.ca/bolker/R"
pkgs_CRAN <- c("lme4","MCMCglmm","blme",
"pbkrtest","coda","aods3","bbmle","ggplot2",
"reshape2","plyr","numDeriv","Hmisc",
"plotMCMC","gridExtra","R2admb",
"broom.mixed","dotwhisker")
install.packages(pkgs_CRAN)
rr <- "http://www.math.mcmaster.ca/bolker/R"
install.packages("glmmADMB",type="source",repos=rr)
View(fit1)
View(mmas_data)
View(data_)
View(aaa2)
View(Betas)
# Install packages ---------------------------------
pkgs_CRAN <- c("lme4","MCMCglmm","blme",
"pbkrtest","coda","aods3","bbmle","ggplot2",
"reshape2","plyr","numDeriv","Hmisc",
"plotMCMC","gridExtra","R2admb",
"broom.mixed","dotwhisker")
install.packages(pkgs_CRAN)
rr <- "http://www.math.mcmaster.ca/bolker/R"
install.packages("glmmADMB",type="source",repos=rr)
library("devtools")
print('Install packages completed')
# Load files ---------------------------------
install.packages("lme4")
install.packages("car")
library("lme4")
library("car")
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
dichotic_csv = read.csv("./HandEar.data.csv")
head(dichotic)
head(dichotic_csv)
hoops = glmer(Hit ~ Spot*Hand + (1 | Subject), family=binomial)
dichotic = lmer(rtime ~ handed*ear + (1 | subject))
rtime
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=binomial)
aggregate(rtime,by=list(ear,handed),FUN=mean)
rtime <- dichotic
dichotic.rtime
View(data_)
View(dichotic)
dichotic[rtime]
dichotic['rtime']
dichotic_glm = glmer(dichotic['rtime'] ~ dichotic['handed']*dichotic['ear'] + (1 | dichotic['subject']), family=binomial)
dichotic['rtime']
attach(dichotic)
attach(dichotic)
attach(dichotic)
install.packages("lme4")
install.packages("car")
library("lme4")
library("car")
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
dichotic_csv = read.csv("./HandEar.data.csv")
install.packages("lme4")
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
dichotic_csv = read.csv("./HandEar.data.csv")
attach(dichotic_csv)
View(dichotic)
# examples -----------------------------------
install.packages("lme4")
library("lme4")
library("car")
dichotic_csv = read.csv("./HandEar.data.csv")
library("lme4")
attach(dichotic_csv)
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=binomial)
handed
ear
subject
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
head(dichotic)
attach(dichotic)
rtime
handed
subject
dichotic_csv = read.table("./HandEar.data.csv")
View(dichotic_csv)
dichotic_csv = read.csv("./HandEar.data.csv")
View(dichotic)
View(dichotic_csv)
View(dichotic_csv)
View(dichotic_csv)
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=binomial)
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=binomial)
subject
dichotic = lmer(rtime ~ handed*ear + (1 | subject))
View(dichotic)
summary(dichotic)
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=normal)
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family=gaussian)
dichotic = glmer(rtime ~ handed*ear + (1 | subject))
dichotic = glmer(rtime ~ handed*ear + (1 | subject))
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family = poisson())
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
#dichotic_csv = read.csv("./HandEar.data.csv")
head(dichotic)
#head(dichotic_csv)
attach(dichotic)
#attach(dichotic_csv)
dichotic = lmer(rtime ~ handed*ear + (1 | subject))
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family = poisson())
library("lme4")
library("car")
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
#dichotic_csv = read.csv("./HandEar.data.csv")
head(dichotic)
#head(dichotic_csv)
attach(dichotic)
#attach(dichotic_csv)
#dichotic = lmer(rtime ~ handed*ear + (1 | subject))
dichotic = glmer(rtime ~ handed*ear + (1 | subject), family = poisson())
summary(dichotic)
# load libraries ---------
library("lme4")
# load data      ---------
data_txt <- read.table("data.txt")
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
View(data_csv)
View(data_txt)
# load libraries   ---------
library("lme4")
# load data        ---------
data_txt <- read.table("data.txt")
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
View(data_txt)
View(data_txt)
View(data_csv)
data_txt <- read.table("data.txt")
View(data_txt)
View(data_txt)
dichotic = read.table("http://www.utstat.toronto.edu/~brunner/data/legal/HandEar.data.txt")
View(dichotic)
data_csv <- read.csv("data.csv")
View(data_txt)
View(dichotic)
# load libraries   ---------
library("lme4")
# load data        ---------
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
View(data_csv)
numCities
glm1 = glmer(numCities ~ mas + nos + undo_c + (1 | subject), family = poisson())
glm2 = glmer(numUNDO ~ mas + nos + leftover + numError + (1 | subject), family = poisson())
glm3 = glmer(sumSeverityErrors ~ mas + nos + leftover + undo_c + (1 | subject), family = poisson())
glm4 = glmer(TT ~ mas + nos + undo_c + (1 | subject), family = inverse.gaussian())
numCities
mas
nos
undo_c
subject
View(data_csv)
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
# subjects	numCities	mas	nos	undo_c	leftover	numError	sumSeverityErrors	numUNDO	TT
numCities
length(numCities)
length(mas)
length(nos)
length(undo_c)
length(subject)
glm1 = glmer(numCities ~ mas + nos + undo_c + (1 | subjects), family = poisson())
summary(glm1 )
glm1 = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (1 | subjects), family = poisson())
glm1
summary(glm1)
glm1 = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (0+mas*nos|subjects) + (0+nos*undo_c|subjects) + (0+undo_c*nos|subjects) +  (1 | subjects), family = poisson())
summary(glm1)
> summary(glm1)
summary(glm1)
View(glm1)
glm1 = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos +
(0+mas|subjects) + (0+nos|subjects) + (0+undo_c|subjects) +
(0+mas:nos|subjects) + (0+undo_c:nos|subjects) + (0+undo_c:mas|subjects) + (1 | subjects), family = poisson())
summary(glm1)
glm1 = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (1 | subjects), family = poisson())
glm1intercepts = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos +
(0+mas|subjects) + (0+nos|subjects) + (0+undo_c|subjects) +
(0+mas:nos|subjects) + (0+undo_c:nos|subjects) + (0+undo_c:mas|subjects) + (1 | subjects), family = poisson())
summary(glm1)
summary(glm1intercepts)
data_ <- data.frame(MAS = mas, NOS = nos, UNDO = undo_c)
glm1data = glmer(numCities ~ 1 + (1 | subjects),data=data_, family = poisson())
glm1data = glmer(numCities ~ .^2 + 1 + (1 | subjects),data=data_, family = poisson())
sumamry(glm1data)
summary(glm1data)
summary(glm1intercepts)
summary(glm1)
glm1data = glmer(numCities ~ .^2 + (1 | subjects),data=data_, family = poisson())
summary(glm1data)
glm1_maximal = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + 1 + (1 | subjects), family = poisson())
summary(glm1_maximal)
glm1_0       = glmer(numCities ~ mas + nos + undo_c + mas:nos (1 | subjects), family = poisson())
glm1_1       = glmer(numCities ~ mas + nos + undo_c + mas:undo_c (1 | subjects), family = poisson())
glm1_2       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos (1 | subjects), family = poisson())
glm1_3       = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_4       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_maximal = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (1 | subjects), family = poisson())
glm1_0
summary(glm1_0)
ptimal solutions (puzzle) + w3 * UNDO (puzzle) + 3 interaction
glm1_0       = glmer(numCities ~ mas + nos + undo_c + mas:nos + (1 | subjects), family = poisson())
glm1_1       = glmer(numCities ~ mas + nos + undo_c + mas:undo_c + (1 | subjects), family = poisson())
glm1_2       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + (1 | subjects), family = poisson())
glm1_3       = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_4       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_maximal = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (1 | subjects), family = poisson())
summary(glm1_0)
summary(glm1_1)
glm1_0       = glmer(numCities ~ mas + nos + undo_c + (1 | subjects), family = poisson())
glm1_1       = glmer(numCities ~ mas + nos + undo_c + mas:undo_c + (1 | subjects), family = poisson())
glm1_2       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + (1 | subjects), family = poisson())
glm1_3       = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_4       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_5       = glmer(numCities ~ mas + nos + undo_c + undo_c:nos + mas:undo_c + (1 | subjects), family = poisson())
glm1_maximal = glmer(numCities ~ mas + nos + undo_c + mas:nos + mas:undo_c + undo_c:nos + (1 | subjects), family = poisson())
View(glm1_0)
summary(glm1_0)
View(glm1_0)
summary(glm1_0)
glm2_0       = glmer(numUNDO ~ mas + nos + leftover + (0+leftover|subjects) + (1 | subjects), family = poisson())
summary(glm2_0)
glm2_0       = glmer(numUNDO ~ mas + nos + (0+leftover|subjects) + (1|leftover) + (1 | subjects), family = poisson())
summary(glm2_0)
# load libraries   ---------
library("lme4")
# load data        ---------
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
# subjects	numCities	mas	nos	undo_c	leftover	numError	sumSeverityErrors	numUNDO	TT
# load libraries   ---------
library("lme4")
# load data        ---------
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
# subjects	numCities	mas	nos	undo_c	leftover	numError	sumSeverityErrors	numUNDO	TT
View(data_csv)
# load libraries   ---------
library("lme4")
# load data        ---------
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
View(data_csv)
glm1 = glmer(numCities ~ mas + nos + undo_c + (1 | subjects), family = poisson())
glm2 = glmer(numUNDO ~ mas + nos + leftover + numError + (1 | subjects), family = poisson())
glm3 = glmer(sumSeverityErrors ~ mas + nos + leftover + undo_c + (1 | subjects), family = poisson())
glm4 = glmer(TT ~ mas + nos + undo_c + (1 | subjects), family = inverse.gaussian())
glm1
summary(glm1)
# load libraries   ---------
library("lme4")
# load data        ---------
data_csv <- read.csv("data.csv")
path_root <- 'puzzle-level-glmm'
head(data_csv)
attach(data_csv)
# subjects	numCities	mas	nos	undo_c	leftover	numError	sumSeverityErrors	numUNDO	TT
glm1_0       = glmer(numCities ~ mas + nos + undo_c + (1 | subjects), family = poisson())
summary(glm1_0)
glm2_0       = glmer(numUNDO ~ mas + nos + (0+leftover|subjects) + (1|leftover) + (1 | subjects), family = poisson())
glm2 = glmer(numUNDO ~ mas + nos + leftover + numError + (1 | subjects), family = poisson())
summary(glm2)
glm2_0       = glmer(numUNDO ~ mas + nos + leftover + (1+leftover|subjects) + (1|leftover) + (1 | subjects), family = poisson())
summary(glm2_0)
View(data_csv)
glm1_0       = glmer(numCities ~ mas + nos + undo_c + (1 | subjects*puzzleID), family = poisson())
summary(glm1_0)
puzzleID
glm1_0       = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
summary(glm1_0)
glm1_0       = glmer(numCities ~ (1+ mas|puzzleID), family = poisson())
glm1_0
glm1_0       = glmer(numCities ~ .^2 + (1+ mas|puzzleID), family = poisson())
glm1_0_1     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects*puzzleID), family = poisson())
glm1_0_2     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
summary(glm1_0_1)
glm1_0_1     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects*puzzleID), family = poisson())
glm1_01     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
glm1_02     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | subjects:puzzleID), family = poisson())
glm1_03     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID), family = poisson())
summary(glm1_01)
summary(glm1_02)
summary(glm1_01)
summary(glm1_02)
summary(glm1_03)
extractAIC
extractAIC(glm1_01)
extractBIC(glm1_01)
calcBIC
library(stepNorm)
GLM1_RESULTS <- list()
glm1_01     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
models[1] <- extractAIC(glm1_01)
glm1_02     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | subjects:puzzleID), family = poisson())
models[2] <- extractAIC(glm1_02)
glm1_03     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID), family = poisson())
models[3] <- extractAIC(glm1_03)
GLM1_RESULTS <- list()
glm1_01     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
GLM1_RESULTS[1] <- extractAIC(glm1_01)
glm1_02     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | subjects:puzzleID), family = poisson())
GLM1_RESULTS[2] <- extractAIC(glm1_02)
glm1_03     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID), family = poisson())
GLM1_RESULTS[3] <- extractAIC(glm1_03)
GLM1_RESULTS
extractAIC(glm1_01)[2]
GLM1_RESULTS[1]
GLM1_RESULTS[1,:]
GLM1_RESULTS[1,0:1]
GLM1_RESULTS[1,1:2] = [1,2]
extractAIC(glm1_01)
typeof(extractAIC(glm1_01))
GLM1S = data.frame()
GLM1S[1]
GLM1_RESULTS[1] <- rbind(extractAIC(glm1_01)[2])
GLM1_RESULTS
GLM1_RESULTS <- list()
rbind(extractAIC(glm1_01)[2])
rbind(extractAIC(glm1_01)
)
rbind(GLM1_RESULTS , extractAIC(glm1_01))
rbind(GLM1_RESULTS , extractAIC(glm1_01))
rbind(GLM1_RESULTS , extractAIC(glm1_01))
GLM1_RESULTS
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_01))
GLM1_RESULTS
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_01))
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_01))
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_01))
GLM1_RESULTS
# GLM 1: Number of connected cities(puzzle, subject) = intercept(random effect of subject) (1 | subject) + w1 * MAS(puzzle) + w2 *number of optimal solutions (puzzle) + w3 * UNDO (puzzle) + 3 interaction
GLM1_RESULTS <- list()
glm1_01     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_01))
glm1_02     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | subjects:puzzleID), family = poisson())
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_02))
glm1_03     = glmer(numCities ~ mas + nos + undo_c + (1 | subjects) + (1 | puzzleID), family = poisson())
GLM1_RESULTS <-rbind(GLM1_RESULTS , extractAIC(glm1_03))
GLM1_RESULTS
glm1_04     = glmer(numCities ~ mas + nos + undo_c + (1 + mas + nos + undo_c | subjects) + (1 + mas + nos + undo_c | puzzleID) + (1 + mas + nos + undo_c | subjects:puzzleID), family = poisson())
glm1_05       = glmer(numCities ~ mas + nos + undo_c + (mas | puzzleID) + (nos | puzzleID) + (undo_c | puzzleID) + (1 | subjects), family = poisson())
summary(glm1_05)
glm1_05       = glmer(numCities ~ mas + nos + undo_c + (mas | puzzleID) + (nos | puzzleID) + (undo_c | puzzleID) + (1 | subjects) + (1 | puzzleID) + (1 | subjects:puzzleID), family = poisson())
summary(glm1_01)
summry(glm1_05)
summary(glm1_05)
